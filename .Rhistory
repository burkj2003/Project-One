scale_fill_continuous(
low = "white", high = "midnightblue", name = "IBU by State") + theme(legend.position = "right")
### IBU South Central
plot_usmap(include = .south_region, data = allbrews, values = "IBU", color = "red") + labs(title = "South Region", subtitle = "This is a map of the IBU by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "IBU by State") + theme(legend.position = "right")
### IBU West Central
plot_usmap(include = .west_region, data = allbrews, values = "IBU", color = "red") + labs(title = "West Region", subtitle = "This is a map of the IBU by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "IBU by State") + theme(legend.position = "right")
### ABV North east
plot_usmap(include = .northeast_region, data = stateABV, values = "median", color = "red") + labs(title = "North East Region", subtitle = "This is a map of the Median ABV by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by State"  ) + theme(legend.position = "right")
### ABV North Central
plot_usmap(include = .north_central_region, data = allbrews, values = "ABV", color = "red") + labs(title = "North central Region", subtitle = "This is a map of the ABV by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by State") + theme(legend.position = "right")
### ABV Mid-West Central
plot_usmap(include = .midwest_region, data = allbrews, values = "ABV", color = "red") + labs(title = "Mid-West Region", subtitle = "This is a map of the ABV by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by State") + theme(legend.position = "right")
### ABV South Central
plot_usmap(include = .south_region, data = allbrews, values = "ABV", color = "red") + labs(title = "South Region", subtitle = "This is a map of the ABV by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by State") + theme(legend.position = "right")
### ABV West Central
plot_usmap(include = .west_region, data = allbrews, values = "ABV", color = "red") + labs(title = "West Region", subtitle = "This is a map of the ABV by State.") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by State") + theme(legend.position = "right")
######################
temp = allbrews
allbrews=temp
######################
# find common beer styles for EDA
styles = c("IPA", "APA", "Blonde ale", "brown ale", "red ale", "ale", "lager", "stout", "cider", "porter", "pilsner", "hefeweizen" ,"pilsener", "witbier", "fruit", "KÃ¶lsch")
beers = data.frame(styles)
beers$nodata = 0
allbrews$class = ""
allbrews$used = FALSE
allbrews$Beer_Name = as.character(allbrews$Beer_Name)
beers$styles = as.character(beers$styles)
for (i in 1:dim(allbrews)[1]) {
for (j in 1:dim(beers)[1]) {
x = beers[j,]$style
y = allbrews[i,]$Style
if (str_detect(y, regex(x, ignore_case = TRUE)) & allbrews[i,]$used != TRUE) {
allbrews[i,]$class = beers[j,]$style
allbrews[i,]$used = TRUE
}
}
}
for (i in 1:dim(allbrews)[1]) {
if (allbrews[i,]$used == FALSE) {
allbrews[i,]$class = "other"
}
if (allbrews[i,]$class == "Pilsener" | allbrews[i,]$class == "pilsener") {
allbrews[i,]$class = "pilsner"
}
}
# find the number of beers in each style
stylesum = count(allbrews, vars = class)
# compute the means for the ABV and IBU by style and then plot
stylemeans = stylesum
stylemeans$ABVmean = 0
stylemeans$IBUmean = 0
stylemeans$ABVtotal = 0
stylemeans$IBUtotal = 0
for (i in 1:dim(allbrews)[1]) {
for (j in 1:dim(stylesum)[1]) {
if (allbrews[i,]$class == stylesum[j,]$vars) {
stylemeans[j,]$ABVtotal = stylemeans[j,]$ABVtotal + allbrews[i,]$ABV
stylemeans[j,]$IBUtotal = stylemeans[j,]$IBUtotal + allbrews[i,]$IBU
}
}
}
for (j in 1:dim(stylemeans)[1]) {
stylemeans[j,]$ABVmean = stylemeans[j,]$ABVtotal / stylemeans[j,]$n
stylemeans[j,]$IBUmean = stylemeans[j,]$IBUtotal / stylemeans[j,]$n
}
stylemeans$ABVmean = round(stylemeans$ABVmean, 4)
stylemeans$IBUmean = round(stylemeans$IBUmean, 4)
names(stylemeans)[names(stylemeans) == "vars"] <- "abbr"
names(stylemeans)[names(stylemeans) == "n"] <- "count"
names(stylemeans)[names(stylemeans) == "abbr"] <- "Style"
# plot ABV vs IBU to see any relationships
gg <- ggplot(stylemeans, aes(x=ABVmean, y=IBUmean)) +
geom_point(aes(col=Style, size=count)) +
labs(subtitle="ABV vs IBU",
y="IBU",
x="ABV",
title="Beer Style ABV vs IBU",
caption = "Source: Brewery Data")
plot(gg)
##  9. Knock their socks off!  Find one other useful inference from the data that you feel Budweiser may be able to find value in.  You must convince them why it is important and back up your conviction with appropriate statistical evidence.
# <!-- justABV<-nona%>%select(ABV) -->
# <!-- summary(justABV) -->
# <!-- hist(justABV$ABV, -->
# <!--     main="Histogram of Alcohol by Volume of beer population", -->
# <!--     xlab="Alcohol by Volume", -->
# <!--     ylab="Beer population", -->
# <!--     col="blue", -->
# <!--     border="black" -->
# <!--     ) -->
# <!-- nona%>%ggplot(aes(x=ABV,fill=State))+geom_histogram(bins=30)+ggtitle("Alcohol by Volume Distribution of Beer population")+xlab("ABV Content")+ylab("Number of Beers")#1 sample t-test of ABV data -->
# <!-- logjustABV<-log(justABV) -->
# <!-- t.test(x=justABV, conf.int = "TRUE", alternative = "two.sided") -->
#
# <!-- justIBU<-nona%>%select(IBU) -->
# <!-- hist(justIBU$IBU, -->
# <!--     main="Histogram of International Bitternes Units of beer population", -->
# <!--     xlab="International Bitternes Units", -->
# <!--     ylab="Beer population", -->
# <!--     col="blue", -->
# <!--     border="black" -->
# <!--     ) -->
# <!-- nona%>%ggplot(aes(x=IBU,color=State))+geom_histogram(bins=30)+ggtitle("Distribution of Bitterness of Beer population")+xlab("Bitterness")+ylab("Number of Beers") -->
styleSubset <- nona%>%select(Style,ABV,IBU)
beermatch <- c("IPA","Ale","Inda Pale Ale")
allAles <-styleSubset[grep(paste(beermatch,collapse="|"),styleSubset$Style,ignore.case = TRUE),]
allAles$styleClass <- ifelse(grepl("IPA", allAles$Style,ignore.case = T), "IPA",
ifelse(grepl("Ale", allAles$Style, ignore.case = T), "Ale", "Other"))
head(allAles)
set.seed(6)
perc=.8
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
iterations=30
accs = data.frame(accuracy = numeric(iterations), k = numeric(iterations))
for(i in 1:iterations)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
accs$accuracy[i] = CM$overall[1]
accs$k[i] = i
}
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
{echo = TRUE}
##  2.   Merge beer data with the breweries data. Print the first 6 observations and the last six observations to check the merged file.  (RMD only, this does not need to be included in the presentation or the deck.)
# find the first 6 and last 6 beers
head(combine)
tail(combine)
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
knitr::opts_chunk$set(echo = TRUE)
plot(pressure)
plot(combine)
plot(accs$k,accs$accuracy, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy")
plot(accs$k,accs$accuracy, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy")
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(splitPerc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
plot(seq(1,numks,1),MeanAcc, type = "l")
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(splitPerc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
plot(accs$k,accs$accuracy, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy")
plot(seq(1,numks,1),MeanAcc, type = "l")
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l")
plot(accs$k,accs$accuracy, type = "l")
styleSubset <- nona%>%select(Style,ABV,IBU)
beermatch <- c("IPA","Ale","Inda Pale Ale")
allAles <-styleSubset[grep(paste(beermatch,collapse="|"),styleSubset$Style,ignore.case = TRUE),]
allAles$styleClass <- ifelse(grepl("IPA", allAles$Style,ignore.case = T), "IPA",
ifelse(grepl("Ale", allAles$Style, ignore.case = T), "Ale", "Other"))
head(allAles)
set.seed(6)
perc=.8
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
iterations=30
accs = data.frame(accuracy = numeric(iterations), k = numeric(iterations))
for(i in 1:iterations)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
accs$accuracy[i] = CM$overall[1]
accs$k[i] = i
}
plot(accs$k,accs$accuracy, type = "l")
plot(accs$k,accs$accuracy, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs
Accuracy")
plot(seq(1,numks,1),MeanAcc, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy"))
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy")
install.packages(c("data.table", "digest", "jomo"))
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
View(temp)
View(stateABV)
stateABV$max = stateABV$max * 100
plot_usmap(data = stateABV, values = "max", include = "CO", color = "red") + labs(title = "Max ABV by State", subtitle = "This is a map of the State with the highest ABV") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV"  ) + theme(legend.position = "right")
plot_usmap(data = stateABV, values = "max", include = "CO", color = "red") + labs(title = "Max ABV by State", subtitle = "This is a map of the State with the highest ABV") +
scale_fill_continuous(
low = "white", high = "midnightblue", name = "ABV by %"  ) + theme(legend.position = "right")
stateABV$min = stateABV$min * 100
knn = 7
k = 7
summary(stateABV$mean)
boxplot(data = stateABV)
justABV = stateABV
justABV%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="lightblue")+ylab("ABV")+ggtitle("Box plot of ABV Summary Statistics")
justABV%>%ggplot(aes(x="", y=mean,fill=mean))+geom_boxplot(width=.4,fill="lightblue")+ylab("ABV")+ggtitle("Box plot of ABV Summary Statistics")
View(nona)
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="lightblue")+ylab("ABV")+ggtitle("Box plot of ABV Summary Statistics")
attach(nona)
bagplot(ABV,IBU, xlab="Car Weight", ylab="Miles Per Gallon",
main="Bagplot Example")
install.packages("aplpack")
library(aplpack)
attach(nona)
bagplot(ABV,IBU, xlab="Car Weight", ylab="Miles Per Gallon",
main="Bagplot Example")
attach(nona)
bagplot(ABV,IBU, xlab="ABV", ylab="IBU",
main="ABV v IBU")
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="plum")+ylab("ABV")+ggtitle("Box plot of ABV Summary Statistics")
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="midnightblue")+ylab("ABV")+labs(title="Box plot of ABV Summary Statistics", caption = "Source: Brewery Statistics")
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="plum")+ylab("ABV")+labs(title="Box plot of ABV Summary Statistics", caption = "Source: Brewery Statistics")
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="plum")+ylab("ABV")+labs(title="Box plot of ABV Summary Statistics", caption = "Source: Brewery Statistics", x="", y="ABV")
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="blue")+ylab("ABV")+labs(title="Box plot of ABV Summary Statistics", caption = "Source: Brewery Statistics", x="", y="ABV")
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
set.seed(6)
beers = read.csv("~/03-School/DS 6306/Project-1/Project-One/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1/Project-One/Breweries.csv")
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(breweries, vars = State)
nona = read.csv("~/03-School/DS 6306/Project-1/Project-One/nona.csv")
temp = statepop
statesum$vars = as.character(statesum$vars)
statesum$vars = str_trim(statesum$vars)
statebrew = merge(statesum, temp, by.x = "vars", by.y = "abbr")
names(statebrew)[names(statebrew) == "vars"] <- "abbr"
names(statebrew)[names(statebrew) == "n"] <- "count"
statebrew$per_cap <- statebrew$pop_2015 / statebrew$count
nona$State = as.character(nona$State)
nona$State = str_trim(nona$State)
allbrews = merge(statebrew, nona, by.x = "abbr", by.y = "State")
stateABV = allbrews %>%
group_by(abbr) %>%
summarise_each(funs(max, min, mean, median, sd), ABV)
stateIBU = allbrews %>%
group_by(abbr) %>%
summarise_each(funs(max, min, mean, median, sd), IBU)
stateABV = merge(temp, stateABV, by.x = "abbr", by.y = "abbr")
stateIBU = merge(temp, stateIBU, by.x = "abbr", by.y = "abbr")
stateABV$median = stateABV$median * 100
stateABV$max = stateABV$max * 100
stateABV$min = stateABV$min * 100
summary(stateABV$mean)
summary(allbrews$ABV)
nona%>%ggplot(aes(x="", y=ABV,fill=ABV))+geom_boxplot(width=.4,fill="blue")+ylab("ABV")+labs(title="Box plot of ABV Summary Statistics", caption = "Source: Brewery Statistics", x="", y="ABV")
temp = allbrews
allbrews=temp
styles = c("IPA", "APA", "Blonde ale", "brown ale", "red ale", "ale", "lager", "stout", "cider", "porter", "pilsner", "hefeweizen" ,"pilsener", "witbier", "fruit", "KÃ¶lsch")
beers = data.frame(styles)
beers$nodata = 0
allbrews$class = ""
allbrews$used = FALSE
allbrews$Beer_Name = as.character(allbrews$Beer_Name)
beers$styles = as.character(beers$styles)
for (i in 1:dim(allbrews)[1]) {
for (j in 1:dim(beers)[1]) {
x = beers[j,]$style
y = allbrews[i,]$Style
if (str_detect(y, regex(x, ignore_case = TRUE)) & allbrews[i,]$used != TRUE) {
allbrews[i,]$class = beers[j,]$style
allbrews[i,]$used = TRUE
}
}
}
for (i in 1:dim(allbrews)[1]) {
if (allbrews[i,]$used == FALSE) {
allbrews[i,]$class = "other"
}
if (allbrews[i,]$class == "Pilsener" | allbrews[i,]$class == "pilsener") {
allbrews[i,]$class = "pilsner"
}
}
stylesum = count(allbrews, vars = class)
stylemeans = stylesum
stylemeans$ABVmean = 0
stylemeans$IBUmean = 0
stylemeans$ABVtotal = 0
stylemeans$IBUtotal = 0
for (i in 1:dim(allbrews)[1]) {
for (j in 1:dim(stylesum)[1]) {
if (allbrews[i,]$class == stylesum[j,]$vars) {
stylemeans[j,]$ABVtotal = stylemeans[j,]$ABVtotal + allbrews[i,]$ABV
stylemeans[j,]$IBUtotal = stylemeans[j,]$IBUtotal + allbrews[i,]$IBU
}
}
}
for (j in 1:dim(stylemeans)[1]) {
stylemeans[j,]$ABVmean = stylemeans[j,]$ABVtotal / stylemeans[j,]$n
stylemeans[j,]$IBUmean = stylemeans[j,]$IBUtotal / stylemeans[j,]$n
}
stylemeans$ABVmean = round(stylemeans$ABVmean, 4)
stylemeans$IBUmean = round(stylemeans$IBUmean, 4)
names(stylemeans)[names(stylemeans) == "vars"] <- "abbr"
names(stylemeans)[names(stylemeans) == "n"] <- "count"
names(stylemeans)[names(stylemeans) == "abbr"] <- "Style"
styleSubset <- nona%>%select(Style,ABV,IBU)
beermatch <- c("IPA","Ale","Inda Pale Ale")
allAles <-styleSubset[grep(paste(beermatch,collapse="|"),styleSubset$Style,ignore.case = TRUE),]
allAles$styleClass <- ifelse(grepl("IPA", allAles$Style,ignore.case = T), "IPA",
ifelse(grepl("Ale", allAles$Style, ignore.case = T), "Ale", "Other"))
iterations = 100
numks = 30
masterAcc = matrix(nrow = iterations, ncol = numks)
for(j in 1:iterations)
{
accs = data.frame(accuracy = numeric(30), k = numeric(30))
trainIndices = sample(1:dim(allAles)[1],round(perc * dim(allAles)[1]))
train = allAles[trainIndices,]
test = allAles[-trainIndices,]
for(i in 1:numks)
{
classifications = knn(train[,c(2,3)],test[,c(2,3)],train$styleClass, prob = TRUE, k = i)
table(test$styleClass,classifications)
CM = confusionMatrix(table(test$styleClass,classifications))
masterAcc[j,i] = CM$overall[1]
}
}
MeanAcc = colMeans(masterAcc)
plot(seq(1,numks,1),MeanAcc, type = "l", xlab = "k", ylab = "Accuracy", main = "K-factor vs Accuracy")
# find the first 6 and last 6 beers
head(combine)
tail(combine)
# find the first 6 and last 6 beers
head(combine)
tail(combine)
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# Install libraries
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
# Chunk 3
set.seed(6)
beers = read.csv("~/03-School/DS 6306/Project-1/Project-One/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1/Project-One/Breweries.csv")
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(breweries, vars = State)
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
beers = read.csv("~/03-School/DS 6306/Project-1/Project-One/Beers.csv")
# read in the brewery data from a .CSV
breweries = read.csv("~/03-School/DS 6306/Project-1/Project-One/Breweries.csv")
# combine the beer and brewery data using the brewery ID as the key
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the names of the column headers to match
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(breweries, vars = State)
library(caret)
library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
install.packages("dataMaid")
install.packages("datamaid")
