library(usmap)
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0)
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
statemeans = statesum
statemeans$ABVmean = 0
statemeans$IBUmean = 0
statemeans$ABVtotal = 0
statemeans$IBUtotal = 0
for (i in 1:dim(nona)[1]) {
for (j in 1:dim(statesum)[1]) {
if (nona[i,]$State == statesum[j,]$vars) {
statemeans[j,]$ABVtotal = statemeans[j,]$ABVtotal + nona[i,]$ABV
statemeans[j,]$IBUtotal = statemeans[j,]$IBUtotal + nona[i,]$IBU
}
}
}
for (j in 1:dim(statemeans)[1]) {
statemeans[j,]$ABVmean = statemeans[j,]$ABVtotal / statemeans[j,]$n
statemeans[j,]$IBUmean = statemeans[j,]$IBUtotal / statemeans[j,]$n
}
statemeans$ABVmean = round(statemeans$ABVmean, 4)
statemeans$IBUmean = round(statemeans$IBUmean, 4)
ABV <- c('ABV')
IBU <- c('IBU')
State <- c('State')
maxABV <- data.frame(ABV, State)
maxIBU <- data.frame(IBU, State)
maxABV$ABV = max(statemeans$ABVmean)
maxIBU$IBU = max(statemeans$IBUmean)
maxABV$State = droplevels(statemeans[grep(max(statemeans$ABVmean), statemeans$ABVmean),]$vars)
maxIBU$State = droplevels(statemeans[grep(max(statemeans$IBUmean), statemeans$IBUmean),]$vars)
ggplot(nona, aes(x=ABV, y=IBU)) +
geom_point(size=2, shape=23)
gg <- ggplot(nona, aes(x=ABV, y=IBU)) +
geom_point(aes(col=State)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.15)) +
ylim(c(0, 150)) +
labs(subtitle="ABV vs IBU",
y="IBU",
x="ABV",
title="Scatterplot",
caption = "Source: Brewery Data")
plot(gg)
init = mice(combine, maxit=0)
View(nona)
write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)
head(statesum)
head(combine)
tail(combine)
head(combine)
tail(combine)
head(combine)
tail(combine)
statemeans = statesum
statemeans$ABVmean = 0
statemeans$IBUmean = 0
statemeans$ABVtotal = 0
statemeans$IBUtotal = 0
for (i in 1:dim(nona)[1]) {
for (j in 1:dim(statesum)[1]) {
if (nona[i,]$State == statesum[j,]$vars) {
statemeans[j,]$ABVtotal = statemeans[j,]$ABVtotal + nona[i,]$ABV
statemeans[j,]$IBUtotal = statemeans[j,]$IBUtotal + nona[i,]$IBU
}
}
}
for (j in 1:dim(statemeans)[1]) {
statemeans[j,]$ABVmean = statemeans[j,]$ABVtotal / statemeans[j,]$n
statemeans[j,]$IBUmean = statemeans[j,]$IBUtotal / statemeans[j,]$n
}
statemeans$ABVmean = round(statemeans$ABVmean, 4)
statemeans$IBUmean = round(statemeans$IBUmean, 4)
ABV <- c('ABV')
IBU <- c('IBU')
State <- c('State')
maxABV <- data.frame(ABV, State)
maxIBU <- data.frame(IBU, State)
maxABV$ABV = max(statemeans$ABVmean)
maxIBU$IBU = max(statemeans$IBUmean)
maxABV$State = droplevels(statemeans[grep(max(statemeans$ABVmean), statemeans$ABVmean),]$vars)
maxIBU$State = droplevels(statemeans[grep(max(statemeans$IBUmean), statemeans$IBUmean),]$vars)
statemeans
ggplot(nona, aes(x=ABV, y=IBU)) +
geom_point(size=2, shape=23)
View(statemeans)
names(statemeans)[names(statemeans) == "vars"] <- "abbr"
names(statemeans)[names(statemeans) == "n"] <- "count"
g <- ggplot(statemeans, aes(count))
g + geom_bar(aes(fill=abbr), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Categorywise Bar Chart",
subtitle="Manufacturer of vehicles",
caption="Source: Manufacturers from 'mpg' dataset")
g <- ggplot(statemeans, aes(count))
g + geom_bar(aes(fill=abbr), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Breweries by State",
subtitle="Mean ABV and Mean IBU by State")
g <- ggplot(statemeans, aes(ABVmean))
g + geom_bar(aes(fill=abbr), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Breweries by State",
subtitle="Mean ABV and Mean IBU by State")
g <- ggplot(statemeans, aes(x = "abbr", y = "ABVmean"))
g + geom_bar(aes(fill=abbr), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Breweries by State",
subtitle="Mean ABV and Mean IBU by State")
g <- ggplot(statemeans, aes(x = "abbr"))
g + geom_bar(aes(fill=abbr), width = 0.5) +
theme(axis.text.x = element_text(angle=65, vjust=0.6)) +
labs(title="Breweries by State",
subtitle="Mean ABV and Mean IBU by State")
statemeans %>% ggplot(aes(x = abbr, fill = ABVmean)) + geom_bar() + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar() + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(stat="ABVmean")
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean))
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr)stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
geom_bar(aes(fill=blue),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
install.packages("shiny")
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
#write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)
head(combine)
tail(combine)
# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0)
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
#View(nona)
statemeans = statesum
statemeans$ABVmean = 0
statemeans$IBUmean = 0
statemeans$ABVtotal = 0
statemeans$IBUtotal = 0
for (i in 1:dim(nona)[1]) {
for (j in 1:dim(statesum)[1]) {
if (nona[i,]$State == statesum[j,]$vars) {
statemeans[j,]$ABVtotal = statemeans[j,]$ABVtotal + nona[i,]$ABV
statemeans[j,]$IBUtotal = statemeans[j,]$IBUtotal + nona[i,]$IBU
}
}
}
for (j in 1:dim(statemeans)[1]) {
statemeans[j,]$ABVmean = statemeans[j,]$ABVtotal / statemeans[j,]$n
statemeans[j,]$IBUmean = statemeans[j,]$IBUtotal / statemeans[j,]$n
}
statemeans$ABVmean = round(statemeans$ABVmean, 4)
statemeans$IBUmean = round(statemeans$IBUmean, 4)
names(statemeans)[names(statemeans) == "vars"] <- "abbr"
names(statemeans)[names(statemeans) == "n"] <- "count"
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
#write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)
head(combine)
tail(combine)
# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0)
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
#write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)
head(combine)
tail(combine)
# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0)
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
# set seed
set.seed(6)
# splitPerc = .75
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
#library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
# set seed
set.seed(6)
# splitPerc = .75
# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1---Case-Study/Breweries.csv")
beers = read.csv("~/03-School/DS 6306/Project-1/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1/Breweries.csv")
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")
# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"
statesum = count(combine, vars = State)
#write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)
head(combine)
tail(combine)
# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0)
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
plot_usmap(data = statebrew, values = "count", color = "red") +
scale_fill_continuous(name = "Beers by State", label = scales::comma) +
theme(legend.position = "right")
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
plot_usmap(data = statebrew, values = "count", color = "red") +
scale_fill_continuous(name = "Beers by State", label = scales::comma) +
theme(legend.position = "right")
statemeans = statesum
statemeans$ABVmean = 0
statemeans$IBUmean = 0
statemeans$ABVtotal = 0
statemeans$IBUtotal = 0
for (i in 1:dim(nona)[1]) {
for (j in 1:dim(statesum)[1]) {
if (nona[i,]$State == statesum[j,]$vars) {
statemeans[j,]$ABVtotal = statemeans[j,]$ABVtotal + nona[i,]$ABV
statemeans[j,]$IBUtotal = statemeans[j,]$IBUtotal + nona[i,]$IBU
}
}
}
for (j in 1:dim(statemeans)[1]) {
statemeans[j,]$ABVmean = statemeans[j,]$ABVtotal / statemeans[j,]$n
statemeans[j,]$IBUmean = statemeans[j,]$IBUtotal / statemeans[j,]$n
}
statemeans$ABVmean = round(statemeans$ABVmean, 4)
statemeans$IBUmean = round(statemeans$IBUmean, 4)
names(statemeans)[names(statemeans) == "vars"] <- "abbr"
names(statemeans)[names(statemeans) == "n"] <- "count"
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
<!-- g <- ggplot(statemeans, aes(x = "abbr")) -->
<!-- g + geom_bar(aes(fill=abbr), width = 0.5) +  -->
<!--   theme(axis.text.x = element_text(angle=65, vjust=0.6)) + -->
<!--   labs(title="Breweries by State",  -->
<!--        subtitle="Mean ABV and Mean IBU by State") -->
ABV <- c('ABV')
IBU <- c('IBU')
State <- c('State')
maxABV <- data.frame(ABV, State)
maxIBU <- data.frame(IBU, State)
maxABV$ABV = max(statemeans$ABVmean)
maxIBU$IBU = max(statemeans$IBUmean)
maxABV$State = droplevels(statemeans[grep(max(statemeans$ABVmean), statemeans$ABVmean),]$vars)
maxIBU$State = droplevels(statemeans[grep(max(statemeans$IBUmean), statemeans$IBUmean),]$vars)
gg <- ggplot(nona, aes(x=ABV, y=IBU)) +
geom_point(aes(col=State)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.15)) +
ylim(c(0, 150)) +
labs(subtitle="ABV vs IBU",
y="IBU",
x="ABV",
title="Scatterplot",
caption = "Source: Brewery Data")
plot(gg)
temp = statepop
str_trim(temp$abbr)
statesum$vars = as.character(statesum$vars)
statesum$vars = str_trim(statesum$vars)
statebrew = merge(statesum, temp, by.x = "vars", by.y = "abbr")
names(statebrew)[names(statebrew) == "vars"] <- "abbr"
names(statebrew)[names(statebrew) == "n"] <- "count"
statebrew$per_cap <- statebrew$pop_2015 / statebrew$count
plot_usmap(data = statebrew, values = "count", color = "red") +
scale_fill_continuous(name = "Beers by State", label = scales::comma) +
theme(legend.position = "right")
plot_usmap(data = allbrews, values = "IBU", color = "red") +
scale_fill_continuous(
low = "white", high = "red", name = "IBU by State"  ) + theme(legend.position = "right")
nona$State = as.character(nona$State)
nona$State = str_trim(nona$State)
allbrews = merge(statebrew, nona, by.x = "abbr", by.y = "State")
plot_usmap(data = allbrews, values = "IBU", color = "red") +
scale_fill_continuous(
low = "white", high = "red", name = "IBU by State"  ) + theme(legend.position = "right")
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)
statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")
p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
geom_bar(aes(fill=abbr),stat="identity")
p
gg <- ggplot(nona, aes(x=ABV, y=IBU)) +
geom_point(aes(col=State)) +
geom_smooth(method="loess", se=F) +
xlim(c(0, 0.15)) +
ylim(c(0, 150)) +
labs(subtitle="ABV vs IBU",
y="IBU",
x="ABV",
title="Scatterplot",
caption = "Source: Brewery Data")
plot(gg)
styles = c("IPA", "ale", "lager", "stout", "cider", "porter", "pilsner", "beer")
i=1
grep(styles[i,], allbrews$Beer_Name)> 0
beers = data.frame(styles)
View(beers)
grep(beers[i,], allbrews$Beer_Name)> 0
beers[i,]
allbrews$Beer_Name
allbrews$style = ""
j=1
allbrews[i,]$Beer_Name
beers[j,]
grep(beers[j,],allbrews[i,]$Beer_Name > 0
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
str(allbrews)
str(beers)
allbrews$Beer_Name = as.character(allbrews$Beer_Name)
beers = as.character(beers)
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
beers[j,]
styles = c("IPA", "ale", "lager", "stout", "cider", "porter", "pilsner", "beer")
beers = data.frame(styles)
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
beers[j,]
allbrews[i,]$Beer_Name
beers = as.character(beers)
grep(beers[j,],allbrews[i,]$Beer_Name > 0)
beers$ = as.character(beers$)
styles = c("IPA", "ale", "lager", "stout", "cider", "porter", "pilsner", "beer")
beers = data.frame(styles)
beers$styles = as.character(beers$styles)
grep(beers[j,]$styles,allbrews[i,]$Beer_Name > 0)
beers$styles = as.character(beers$styles)
allbrews = merge(statebrew, nona, by.x = "abbr", by.y = "State")
styles = c("IPA", "ale", "lager", "stout", "cider", "porter", "pilsner", "beer")
beers = data.frame(styles)
grep(beers[j,]$styles,allbrews[i,]$Beer_Name > 0)
allbrews$style = ""
allbrews$Beer_Name = as.character(allbrews$Beer_Name)
beers$styles = as.character(beers$styles)
grep(beers[j,]$styles,allbrews[i,]$Beer_Name > 0)
