---
output: html_document
editor_options: 
  chunk_output_type: console
---
#########################
# Project 
#install.packages("mice")
#install.packages("ggalt")
#install.packages("usmap")

#library(caret)
#library(e1071)
library(class)
library(tidyverse)
library(ggplot2)
library(dplyr)
library(data.table)
library(mice)
library(ggalt)
library(usmap)

# set seed
set.seed(6)
# splitPerc = .75

# Read in csv files
beers = read.csv("~/03-School/DS 6306/Project-1/Beers.csv")
breweries = read.csv("~/03-School/DS 6306/Project-1/Breweries.csv")

# add new data not on GitHub
combine = merge(beers, breweries, by.x = "Brewery_id", by.y = "Brew_ID")

# change the column names to match the data
names(combine)[names(combine) == "Name.x"] <- "Beer_Name"
names(combine)[names(combine) == "Name.y"] <- "Brewery_Name"

statesum = count(combine, vars = State)

#write.csv(statesum, file = "~/03-School/DS 6306/Project-1/StateData.csv", row.names = FALSE)

head(combine)
tail(combine)

# No iteration. But I want to get Predictor-Matrix
init = mice(combine, maxit=0) 
predM = init$predictorMatrix
# Do not use following columns to impute values in 'ABV' and 'IBU'. Use the rest.
predM[, c("Beer_Name", "Beer_ID", "Ounces", "Brewery_Name")]=0    
imp<-mice(combine, m=5, predictorMatrix = predM)
# Get the final data-frame with imputed values filled in
nona <- complete(imp)
#View(nona)

statemeans = statesum
statemeans$ABVmean = 0
statemeans$IBUmean = 0
statemeans$ABVtotal = 0
statemeans$IBUtotal = 0

for (i in 1:dim(nona)[1]) {
  for (j in 1:dim(statesum)[1]) {
    if (nona[i,]$State == statesum[j,]$vars) {
      statemeans[j,]$ABVtotal = statemeans[j,]$ABVtotal + nona[i,]$ABV
      statemeans[j,]$IBUtotal = statemeans[j,]$IBUtotal + nona[i,]$IBU
    }
  }
}

for (j in 1:dim(statemeans)[1]) {
  statemeans[j,]$ABVmean = statemeans[j,]$ABVtotal / statemeans[j,]$n
  statemeans[j,]$IBUmean = statemeans[j,]$IBUtotal / statemeans[j,]$n
}

statemeans$ABVmean = round(statemeans$ABVmean, 4)
statemeans$IBUmean = round(statemeans$IBUmean, 4)
names(statemeans)[names(statemeans) == "vars"] <- "abbr"
names(statemeans)[names(statemeans) == "n"] <- "count"

statemeans %>% ggplot(aes(x = abbr, fill = IBUmean)) + geom_bar(aes(fill=abbr), width = 0.5) + ggtitle("Number of Restaurants in Baltimore by Council Disctrict Number")

p<-ggplot(data=statemeans, aes(x=abbr, y=IBUmean)) +
  geom_bar(aes(fill=abbr),stat="identity")
p

p<-ggplot(data=statemeans, aes(x=abbr, y=ABVmean)) +
  geom_bar(aes(fill=abbr),stat="identity")
p

<!-- g <- ggplot(statemeans, aes(x = "abbr")) -->
<!-- g + geom_bar(aes(fill=abbr), width = 0.5) +  -->
<!--   theme(axis.text.x = element_text(angle=65, vjust=0.6)) + -->
<!--   labs(title="Breweries by State",  -->
<!--        subtitle="Mean ABV and Mean IBU by State") -->

ABV <- c('ABV')
IBU <- c('IBU')
State <- c('State')
maxABV <- data.frame(ABV, State)
maxIBU <- data.frame(IBU, State)

maxABV$ABV = max(statemeans$ABVmean)
maxIBU$IBU = max(statemeans$IBUmean)

maxABV$State = droplevels(statemeans[grep(max(statemeans$ABVmean), statemeans$ABVmean),]$vars)

maxIBU$State = droplevels(statemeans[grep(max(statemeans$IBUmean), statemeans$IBUmean),]$vars)

gg <- ggplot(nona, aes(x=ABV, y=IBU)) +
  geom_point(aes(col=State)) +
  geom_smooth(method="loess", se=F) +
  xlim(c(0, 0.15)) +
  ylim(c(0, 150)) + 
  labs(subtitle="ABV vs IBU",
       y="IBU",
       x="ABV",
       title="Scatterplot",
       caption = "Source: Brewery Data")

plot(gg)

temp = statepop

str_trim(temp$abbr)

statesum$vars = as.character(statesum$vars)
statesum$vars = str_trim(statesum$vars)

statebrew = merge(statesum, temp, by.x = "vars", by.y = "abbr")

names(statebrew)[names(statebrew) == "vars"] <- "abbr"
names(statebrew)[names(statebrew) == "n"] <- "count"

statebrew$per_cap <- statebrew$pop_2015 / statebrew$count

####  plots 
plot_usmap(data = statebrew, values = "count", color = "red") + 
  scale_fill_continuous(name = "Beers by State", label = scales::comma) + 
  theme(legend.position = "right")
  
plot_usmap(data = allbrews, values = "count", color = "navy") + 
  scale_fill_continuous(
    low = "grey99", high = "grey0", name = "Beers by State", label = scales::comma
  ) + theme(legend.position = "right")  

plot_usmap(data = statebrew, values = "count", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "Beers by State", label = scales::comma
  ) + theme(legend.position = "right")



#####  states pop div by beers
plot_usmap(data = statebrew, values = "per_cap", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "States Population div by beers", label = scales::comma
  ) + theme(legend.position = "right")


plot_usmap(include = c("CA", "ID", "NV", "OR", "WA"), data = statebrew, values = "per_cap", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "States Population div by beers", label = scales::comma
  ) + theme(legend.position = "right")


nona$State = as.character(nona$State)
nona$State = str_trim(nona$State)
allbrews = merge(statebrew, nona, by.x = "abbr", by.y = "State")


### ABV usa
plot_usmap(data = allbrews, values = "ABV", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "Alcohol by Volume by State"  ) + theme(legend.position = "right")

#### IBU usa
plot_usmap(data = allbrews, values = "IBU", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "IBU by State"  ) + theme(legend.position = "right")
    
#### IBU North east    
plot_usmap(include = .northeast_region, data = allbrews, values = "IBU", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "IBU by State"  ) + theme(legend.position = "right")

#### IBU New England    
plot_usmap(include = .new_england, data = allbrews, values = "IBU", color = "red") + 
  scale_fill_continuous(
    low = "white", high = "red", name = "IBU by State"  ) + theme(legend.position = "right")
    
           
    
    
    
    
    




